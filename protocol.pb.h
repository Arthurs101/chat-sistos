// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protocol.proto
// Protobuf C++ Version: 5.26.0

#ifndef GOOGLE_PROTOBUF_INCLUDED_protocol_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_protocol_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION != 5026000
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_protocol_2eproto

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_protocol_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_protocol_2eproto;
namespace chat {
class ChangeStatus;
struct ChangeStatusDefaultTypeInternal;
extern ChangeStatusDefaultTypeInternal _ChangeStatus_default_instance_;
class ClientPetition;
struct ClientPetitionDefaultTypeInternal;
extern ClientPetitionDefaultTypeInternal _ClientPetition_default_instance_;
class ConnectedUsersResponse;
struct ConnectedUsersResponseDefaultTypeInternal;
extern ConnectedUsersResponseDefaultTypeInternal _ConnectedUsersResponse_default_instance_;
class MessageCommunication;
struct MessageCommunicationDefaultTypeInternal;
extern MessageCommunicationDefaultTypeInternal _MessageCommunication_default_instance_;
class ServerResponse;
struct ServerResponseDefaultTypeInternal;
extern ServerResponseDefaultTypeInternal _ServerResponse_default_instance_;
class UserInfo;
struct UserInfoDefaultTypeInternal;
extern UserInfoDefaultTypeInternal _UserInfo_default_instance_;
class UserRegistration;
struct UserRegistrationDefaultTypeInternal;
extern UserRegistrationDefaultTypeInternal _UserRegistration_default_instance_;
class UserRequest;
struct UserRequestDefaultTypeInternal;
extern UserRequestDefaultTypeInternal _UserRequest_default_instance_;
}  // namespace chat
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace chat {

// ===================================================================


// -------------------------------------------------------------------

class UserRequest final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:chat.UserRequest) */ {
 public:
  inline UserRequest() : UserRequest(nullptr) {}
  ~UserRequest() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR UserRequest(
      ::google::protobuf::internal::ConstantInitialized);

  inline UserRequest(const UserRequest& from) : UserRequest(nullptr, from) {}
  inline UserRequest(UserRequest&& from) noexcept
      : UserRequest(nullptr, std::move(from)) {}
  inline UserRequest& operator=(const UserRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline UserRequest& operator=(UserRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UserRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const UserRequest* internal_default_instance() {
    return reinterpret_cast<const UserRequest*>(
        &_UserRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 2;
  friend void swap(UserRequest& a, UserRequest& b) { a.Swap(&b); }
  inline void Swap(UserRequest* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UserRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UserRequest* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<UserRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const UserRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const UserRequest& from) { UserRequest::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(UserRequest* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "chat.UserRequest"; }

 protected:
  explicit UserRequest(::google::protobuf::Arena* arena);
  UserRequest(::google::protobuf::Arena* arena, const UserRequest& from);
  UserRequest(::google::protobuf::Arena* arena, UserRequest&& from) noexcept
      : UserRequest(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::MessageLite::ClassData* GetClassData()
      const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const final;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kUserFieldNumber = 1,
  };
  // optional string user = 1;
  bool has_user() const;
  void clear_user() ;
  const std::string& user() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_user(Arg_&& arg, Args_... args);
  std::string* mutable_user();
  PROTOBUF_NODISCARD std::string* release_user();
  void set_allocated_user(std::string* value);

  private:
  const std::string& _internal_user() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_user(
      const std::string& value);
  std::string* _internal_mutable_user();

  public:
  // @@protoc_insertion_point(class_scope:chat.UserRequest)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      29, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr user_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protocol_2eproto;
};
// -------------------------------------------------------------------

class UserRegistration final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:chat.UserRegistration) */ {
 public:
  inline UserRegistration() : UserRegistration(nullptr) {}
  ~UserRegistration() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR UserRegistration(
      ::google::protobuf::internal::ConstantInitialized);

  inline UserRegistration(const UserRegistration& from) : UserRegistration(nullptr, from) {}
  inline UserRegistration(UserRegistration&& from) noexcept
      : UserRegistration(nullptr, std::move(from)) {}
  inline UserRegistration& operator=(const UserRegistration& from) {
    CopyFrom(from);
    return *this;
  }
  inline UserRegistration& operator=(UserRegistration&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UserRegistration& default_instance() {
    return *internal_default_instance();
  }
  static inline const UserRegistration* internal_default_instance() {
    return reinterpret_cast<const UserRegistration*>(
        &_UserRegistration_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(UserRegistration& a, UserRegistration& b) { a.Swap(&b); }
  inline void Swap(UserRegistration* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UserRegistration* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UserRegistration* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<UserRegistration>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const UserRegistration& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const UserRegistration& from) { UserRegistration::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(UserRegistration* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "chat.UserRegistration"; }

 protected:
  explicit UserRegistration(::google::protobuf::Arena* arena);
  UserRegistration(::google::protobuf::Arena* arena, const UserRegistration& from);
  UserRegistration(::google::protobuf::Arena* arena, UserRegistration&& from) noexcept
      : UserRegistration(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::MessageLite::ClassData* GetClassData()
      const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const final;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kUsernameFieldNumber = 1,
    kIpFieldNumber = 2,
  };
  // optional string username = 1;
  bool has_username() const;
  void clear_username() ;
  const std::string& username() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_username(Arg_&& arg, Args_... args);
  std::string* mutable_username();
  PROTOBUF_NODISCARD std::string* release_username();
  void set_allocated_username(std::string* value);

  private:
  const std::string& _internal_username() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_username(
      const std::string& value);
  std::string* _internal_mutable_username();

  public:
  // optional string ip = 2;
  bool has_ip() const;
  void clear_ip() ;
  const std::string& ip() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_ip(Arg_&& arg, Args_... args);
  std::string* mutable_ip();
  PROTOBUF_NODISCARD std::string* release_ip();
  void set_allocated_ip(std::string* value);

  private:
  const std::string& _internal_ip() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_ip(
      const std::string& value);
  std::string* _internal_mutable_ip();

  public:
  // @@protoc_insertion_point(class_scope:chat.UserRegistration)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      40, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr username_;
    ::google::protobuf::internal::ArenaStringPtr ip_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protocol_2eproto;
};
// -------------------------------------------------------------------

class UserInfo final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:chat.UserInfo) */ {
 public:
  inline UserInfo() : UserInfo(nullptr) {}
  ~UserInfo() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR UserInfo(
      ::google::protobuf::internal::ConstantInitialized);

  inline UserInfo(const UserInfo& from) : UserInfo(nullptr, from) {}
  inline UserInfo(UserInfo&& from) noexcept
      : UserInfo(nullptr, std::move(from)) {}
  inline UserInfo& operator=(const UserInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline UserInfo& operator=(UserInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UserInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const UserInfo* internal_default_instance() {
    return reinterpret_cast<const UserInfo*>(
        &_UserInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 1;
  friend void swap(UserInfo& a, UserInfo& b) { a.Swap(&b); }
  inline void Swap(UserInfo* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UserInfo* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UserInfo* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<UserInfo>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const UserInfo& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const UserInfo& from) { UserInfo::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(UserInfo* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "chat.UserInfo"; }

 protected:
  explicit UserInfo(::google::protobuf::Arena* arena);
  UserInfo(::google::protobuf::Arena* arena, const UserInfo& from);
  UserInfo(::google::protobuf::Arena* arena, UserInfo&& from) noexcept
      : UserInfo(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::MessageLite::ClassData* GetClassData()
      const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const final;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kUsernameFieldNumber = 1,
    kStatusFieldNumber = 2,
    kIpFieldNumber = 3,
  };
  // optional string username = 1;
  bool has_username() const;
  void clear_username() ;
  const std::string& username() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_username(Arg_&& arg, Args_... args);
  std::string* mutable_username();
  PROTOBUF_NODISCARD std::string* release_username();
  void set_allocated_username(std::string* value);

  private:
  const std::string& _internal_username() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_username(
      const std::string& value);
  std::string* _internal_mutable_username();

  public:
  // optional string status = 2;
  bool has_status() const;
  void clear_status() ;
  const std::string& status() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_status(Arg_&& arg, Args_... args);
  std::string* mutable_status();
  PROTOBUF_NODISCARD std::string* release_status();
  void set_allocated_status(std::string* value);

  private:
  const std::string& _internal_status() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_status(
      const std::string& value);
  std::string* _internal_mutable_status();

  public:
  // optional string ip = 3;
  bool has_ip() const;
  void clear_ip() ;
  const std::string& ip() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_ip(Arg_&& arg, Args_... args);
  std::string* mutable_ip();
  PROTOBUF_NODISCARD std::string* release_ip();
  void set_allocated_ip(std::string* value);

  private:
  const std::string& _internal_ip() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_ip(
      const std::string& value);
  std::string* _internal_mutable_ip();

  public:
  // @@protoc_insertion_point(class_scope:chat.UserInfo)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 0,
      38, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr username_;
    ::google::protobuf::internal::ArenaStringPtr status_;
    ::google::protobuf::internal::ArenaStringPtr ip_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protocol_2eproto;
};
// -------------------------------------------------------------------

class MessageCommunication final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:chat.MessageCommunication) */ {
 public:
  inline MessageCommunication() : MessageCommunication(nullptr) {}
  ~MessageCommunication() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR MessageCommunication(
      ::google::protobuf::internal::ConstantInitialized);

  inline MessageCommunication(const MessageCommunication& from) : MessageCommunication(nullptr, from) {}
  inline MessageCommunication(MessageCommunication&& from) noexcept
      : MessageCommunication(nullptr, std::move(from)) {}
  inline MessageCommunication& operator=(const MessageCommunication& from) {
    CopyFrom(from);
    return *this;
  }
  inline MessageCommunication& operator=(MessageCommunication&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MessageCommunication& default_instance() {
    return *internal_default_instance();
  }
  static inline const MessageCommunication* internal_default_instance() {
    return reinterpret_cast<const MessageCommunication*>(
        &_MessageCommunication_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 5;
  friend void swap(MessageCommunication& a, MessageCommunication& b) { a.Swap(&b); }
  inline void Swap(MessageCommunication* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MessageCommunication* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MessageCommunication* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<MessageCommunication>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const MessageCommunication& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const MessageCommunication& from) { MessageCommunication::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(MessageCommunication* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "chat.MessageCommunication"; }

 protected:
  explicit MessageCommunication(::google::protobuf::Arena* arena);
  MessageCommunication(::google::protobuf::Arena* arena, const MessageCommunication& from);
  MessageCommunication(::google::protobuf::Arena* arena, MessageCommunication&& from) noexcept
      : MessageCommunication(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::MessageLite::ClassData* GetClassData()
      const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const final;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kMessageFieldNumber = 1,
    kRecipientFieldNumber = 2,
    kSenderFieldNumber = 3,
  };
  // optional string message = 1;
  bool has_message() const;
  void clear_message() ;
  const std::string& message() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_message(Arg_&& arg, Args_... args);
  std::string* mutable_message();
  PROTOBUF_NODISCARD std::string* release_message();
  void set_allocated_message(std::string* value);

  private:
  const std::string& _internal_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message(
      const std::string& value);
  std::string* _internal_mutable_message();

  public:
  // optional string recipient = 2;
  bool has_recipient() const;
  void clear_recipient() ;
  const std::string& recipient() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_recipient(Arg_&& arg, Args_... args);
  std::string* mutable_recipient();
  PROTOBUF_NODISCARD std::string* release_recipient();
  void set_allocated_recipient(std::string* value);

  private:
  const std::string& _internal_recipient() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_recipient(
      const std::string& value);
  std::string* _internal_mutable_recipient();

  public:
  // optional string sender = 3;
  bool has_sender() const;
  void clear_sender() ;
  const std::string& sender() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_sender(Arg_&& arg, Args_... args);
  std::string* mutable_sender();
  PROTOBUF_NODISCARD std::string* release_sender();
  void set_allocated_sender(std::string* value);

  private:
  const std::string& _internal_sender() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_sender(
      const std::string& value);
  std::string* _internal_mutable_sender();

  public:
  // @@protoc_insertion_point(class_scope:chat.MessageCommunication)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 0,
      56, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr message_;
    ::google::protobuf::internal::ArenaStringPtr recipient_;
    ::google::protobuf::internal::ArenaStringPtr sender_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protocol_2eproto;
};
// -------------------------------------------------------------------

class ChangeStatus final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:chat.ChangeStatus) */ {
 public:
  inline ChangeStatus() : ChangeStatus(nullptr) {}
  ~ChangeStatus() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR ChangeStatus(
      ::google::protobuf::internal::ConstantInitialized);

  inline ChangeStatus(const ChangeStatus& from) : ChangeStatus(nullptr, from) {}
  inline ChangeStatus(ChangeStatus&& from) noexcept
      : ChangeStatus(nullptr, std::move(from)) {}
  inline ChangeStatus& operator=(const ChangeStatus& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChangeStatus& operator=(ChangeStatus&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ChangeStatus& default_instance() {
    return *internal_default_instance();
  }
  static inline const ChangeStatus* internal_default_instance() {
    return reinterpret_cast<const ChangeStatus*>(
        &_ChangeStatus_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 4;
  friend void swap(ChangeStatus& a, ChangeStatus& b) { a.Swap(&b); }
  inline void Swap(ChangeStatus* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ChangeStatus* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ChangeStatus* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<ChangeStatus>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ChangeStatus& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const ChangeStatus& from) { ChangeStatus::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(ChangeStatus* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "chat.ChangeStatus"; }

 protected:
  explicit ChangeStatus(::google::protobuf::Arena* arena);
  ChangeStatus(::google::protobuf::Arena* arena, const ChangeStatus& from);
  ChangeStatus(::google::protobuf::Arena* arena, ChangeStatus&& from) noexcept
      : ChangeStatus(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::MessageLite::ClassData* GetClassData()
      const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const final;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kUsernameFieldNumber = 1,
    kStatusFieldNumber = 2,
  };
  // optional string username = 1;
  bool has_username() const;
  void clear_username() ;
  const std::string& username() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_username(Arg_&& arg, Args_... args);
  std::string* mutable_username();
  PROTOBUF_NODISCARD std::string* release_username();
  void set_allocated_username(std::string* value);

  private:
  const std::string& _internal_username() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_username(
      const std::string& value);
  std::string* _internal_mutable_username();

  public:
  // optional string status = 2;
  bool has_status() const;
  void clear_status() ;
  const std::string& status() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_status(Arg_&& arg, Args_... args);
  std::string* mutable_status();
  PROTOBUF_NODISCARD std::string* release_status();
  void set_allocated_status(std::string* value);

  private:
  const std::string& _internal_status() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_status(
      const std::string& value);
  std::string* _internal_mutable_status();

  public:
  // @@protoc_insertion_point(class_scope:chat.ChangeStatus)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      40, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr username_;
    ::google::protobuf::internal::ArenaStringPtr status_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protocol_2eproto;
};
// -------------------------------------------------------------------

class ConnectedUsersResponse final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:chat.ConnectedUsersResponse) */ {
 public:
  inline ConnectedUsersResponse() : ConnectedUsersResponse(nullptr) {}
  ~ConnectedUsersResponse() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR ConnectedUsersResponse(
      ::google::protobuf::internal::ConstantInitialized);

  inline ConnectedUsersResponse(const ConnectedUsersResponse& from) : ConnectedUsersResponse(nullptr, from) {}
  inline ConnectedUsersResponse(ConnectedUsersResponse&& from) noexcept
      : ConnectedUsersResponse(nullptr, std::move(from)) {}
  inline ConnectedUsersResponse& operator=(const ConnectedUsersResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ConnectedUsersResponse& operator=(ConnectedUsersResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ConnectedUsersResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ConnectedUsersResponse* internal_default_instance() {
    return reinterpret_cast<const ConnectedUsersResponse*>(
        &_ConnectedUsersResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 3;
  friend void swap(ConnectedUsersResponse& a, ConnectedUsersResponse& b) { a.Swap(&b); }
  inline void Swap(ConnectedUsersResponse* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ConnectedUsersResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ConnectedUsersResponse* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<ConnectedUsersResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ConnectedUsersResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const ConnectedUsersResponse& from) { ConnectedUsersResponse::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(ConnectedUsersResponse* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "chat.ConnectedUsersResponse"; }

 protected:
  explicit ConnectedUsersResponse(::google::protobuf::Arena* arena);
  ConnectedUsersResponse(::google::protobuf::Arena* arena, const ConnectedUsersResponse& from);
  ConnectedUsersResponse(::google::protobuf::Arena* arena, ConnectedUsersResponse&& from) noexcept
      : ConnectedUsersResponse(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::MessageLite::ClassData* GetClassData()
      const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const final;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kConnectedUsersFieldNumber = 1,
  };
  // repeated .chat.UserInfo connectedUsers = 1;
  int connectedusers_size() const;
  private:
  int _internal_connectedusers_size() const;

  public:
  void clear_connectedusers() ;
  ::chat::UserInfo* mutable_connectedusers(int index);
  ::google::protobuf::RepeatedPtrField<::chat::UserInfo>* mutable_connectedusers();

  private:
  const ::google::protobuf::RepeatedPtrField<::chat::UserInfo>& _internal_connectedusers() const;
  ::google::protobuf::RepeatedPtrField<::chat::UserInfo>* _internal_mutable_connectedusers();
  public:
  const ::chat::UserInfo& connectedusers(int index) const;
  ::chat::UserInfo* add_connectedusers();
  const ::google::protobuf::RepeatedPtrField<::chat::UserInfo>& connectedusers() const;
  // @@protoc_insertion_point(class_scope:chat.ConnectedUsersResponse)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 1,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::RepeatedPtrField< ::chat::UserInfo > connectedusers_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protocol_2eproto;
};
// -------------------------------------------------------------------

class ClientPetition final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:chat.ClientPetition) */ {
 public:
  inline ClientPetition() : ClientPetition(nullptr) {}
  ~ClientPetition() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR ClientPetition(
      ::google::protobuf::internal::ConstantInitialized);

  inline ClientPetition(const ClientPetition& from) : ClientPetition(nullptr, from) {}
  inline ClientPetition(ClientPetition&& from) noexcept
      : ClientPetition(nullptr, std::move(from)) {}
  inline ClientPetition& operator=(const ClientPetition& from) {
    CopyFrom(from);
    return *this;
  }
  inline ClientPetition& operator=(ClientPetition&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ClientPetition& default_instance() {
    return *internal_default_instance();
  }
  static inline const ClientPetition* internal_default_instance() {
    return reinterpret_cast<const ClientPetition*>(
        &_ClientPetition_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 6;
  friend void swap(ClientPetition& a, ClientPetition& b) { a.Swap(&b); }
  inline void Swap(ClientPetition* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ClientPetition* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ClientPetition* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<ClientPetition>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ClientPetition& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const ClientPetition& from) { ClientPetition::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(ClientPetition* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "chat.ClientPetition"; }

 protected:
  explicit ClientPetition(::google::protobuf::Arena* arena);
  ClientPetition(::google::protobuf::Arena* arena, const ClientPetition& from);
  ClientPetition(::google::protobuf::Arena* arena, ClientPetition&& from) noexcept
      : ClientPetition(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::MessageLite::ClassData* GetClassData()
      const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const final;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kRegistrationFieldNumber = 2,
    kUsersFieldNumber = 3,
    kChangeFieldNumber = 4,
    kMessageCommunicationFieldNumber = 5,
    kOptionFieldNumber = 1,
  };
  // optional .chat.UserRegistration registration = 2;
  bool has_registration() const;
  void clear_registration() ;
  const ::chat::UserRegistration& registration() const;
  PROTOBUF_NODISCARD ::chat::UserRegistration* release_registration();
  ::chat::UserRegistration* mutable_registration();
  void set_allocated_registration(::chat::UserRegistration* value);
  void unsafe_arena_set_allocated_registration(::chat::UserRegistration* value);
  ::chat::UserRegistration* unsafe_arena_release_registration();

  private:
  const ::chat::UserRegistration& _internal_registration() const;
  ::chat::UserRegistration* _internal_mutable_registration();

  public:
  // optional .chat.UserRequest users = 3;
  bool has_users() const;
  void clear_users() ;
  const ::chat::UserRequest& users() const;
  PROTOBUF_NODISCARD ::chat::UserRequest* release_users();
  ::chat::UserRequest* mutable_users();
  void set_allocated_users(::chat::UserRequest* value);
  void unsafe_arena_set_allocated_users(::chat::UserRequest* value);
  ::chat::UserRequest* unsafe_arena_release_users();

  private:
  const ::chat::UserRequest& _internal_users() const;
  ::chat::UserRequest* _internal_mutable_users();

  public:
  // optional .chat.ChangeStatus change = 4;
  bool has_change() const;
  void clear_change() ;
  const ::chat::ChangeStatus& change() const;
  PROTOBUF_NODISCARD ::chat::ChangeStatus* release_change();
  ::chat::ChangeStatus* mutable_change();
  void set_allocated_change(::chat::ChangeStatus* value);
  void unsafe_arena_set_allocated_change(::chat::ChangeStatus* value);
  ::chat::ChangeStatus* unsafe_arena_release_change();

  private:
  const ::chat::ChangeStatus& _internal_change() const;
  ::chat::ChangeStatus* _internal_mutable_change();

  public:
  // optional .chat.MessageCommunication messageCommunication = 5;
  bool has_messagecommunication() const;
  void clear_messagecommunication() ;
  const ::chat::MessageCommunication& messagecommunication() const;
  PROTOBUF_NODISCARD ::chat::MessageCommunication* release_messagecommunication();
  ::chat::MessageCommunication* mutable_messagecommunication();
  void set_allocated_messagecommunication(::chat::MessageCommunication* value);
  void unsafe_arena_set_allocated_messagecommunication(::chat::MessageCommunication* value);
  ::chat::MessageCommunication* unsafe_arena_release_messagecommunication();

  private:
  const ::chat::MessageCommunication& _internal_messagecommunication() const;
  ::chat::MessageCommunication* _internal_mutable_messagecommunication();

  public:
  // optional int32 option = 1;
  bool has_option() const;
  void clear_option() ;
  ::int32_t option() const;
  void set_option(::int32_t value);

  private:
  ::int32_t _internal_option() const;
  void _internal_set_option(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:chat.ClientPetition)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 5, 4,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::chat::UserRegistration* registration_;
    ::chat::UserRequest* users_;
    ::chat::ChangeStatus* change_;
    ::chat::MessageCommunication* messagecommunication_;
    ::int32_t option_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protocol_2eproto;
};
// -------------------------------------------------------------------

class ServerResponse final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:chat.ServerResponse) */ {
 public:
  inline ServerResponse() : ServerResponse(nullptr) {}
  ~ServerResponse() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR ServerResponse(
      ::google::protobuf::internal::ConstantInitialized);

  inline ServerResponse(const ServerResponse& from) : ServerResponse(nullptr, from) {}
  inline ServerResponse(ServerResponse&& from) noexcept
      : ServerResponse(nullptr, std::move(from)) {}
  inline ServerResponse& operator=(const ServerResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ServerResponse& operator=(ServerResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ServerResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ServerResponse* internal_default_instance() {
    return reinterpret_cast<const ServerResponse*>(
        &_ServerResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 7;
  friend void swap(ServerResponse& a, ServerResponse& b) { a.Swap(&b); }
  inline void Swap(ServerResponse* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ServerResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ServerResponse* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<ServerResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ServerResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const ServerResponse& from) { ServerResponse::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(ServerResponse* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "chat.ServerResponse"; }

 protected:
  explicit ServerResponse(::google::protobuf::Arena* arena);
  ServerResponse(::google::protobuf::Arena* arena, const ServerResponse& from);
  ServerResponse(::google::protobuf::Arena* arena, ServerResponse&& from) noexcept
      : ServerResponse(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::MessageLite::ClassData* GetClassData()
      const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const final;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kServerMessageFieldNumber = 3,
    kConnectedUsersFieldNumber = 4,
    kMessageCommunicationFieldNumber = 5,
    kUserInfoResponseFieldNumber = 6,
    kChangeFieldNumber = 7,
    kOptionFieldNumber = 1,
    kCodeFieldNumber = 2,
  };
  // optional string serverMessage = 3;
  bool has_servermessage() const;
  void clear_servermessage() ;
  const std::string& servermessage() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_servermessage(Arg_&& arg, Args_... args);
  std::string* mutable_servermessage();
  PROTOBUF_NODISCARD std::string* release_servermessage();
  void set_allocated_servermessage(std::string* value);

  private:
  const std::string& _internal_servermessage() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_servermessage(
      const std::string& value);
  std::string* _internal_mutable_servermessage();

  public:
  // optional .chat.ConnectedUsersResponse connectedUsers = 4;
  bool has_connectedusers() const;
  void clear_connectedusers() ;
  const ::chat::ConnectedUsersResponse& connectedusers() const;
  PROTOBUF_NODISCARD ::chat::ConnectedUsersResponse* release_connectedusers();
  ::chat::ConnectedUsersResponse* mutable_connectedusers();
  void set_allocated_connectedusers(::chat::ConnectedUsersResponse* value);
  void unsafe_arena_set_allocated_connectedusers(::chat::ConnectedUsersResponse* value);
  ::chat::ConnectedUsersResponse* unsafe_arena_release_connectedusers();

  private:
  const ::chat::ConnectedUsersResponse& _internal_connectedusers() const;
  ::chat::ConnectedUsersResponse* _internal_mutable_connectedusers();

  public:
  // optional .chat.MessageCommunication messageCommunication = 5;
  bool has_messagecommunication() const;
  void clear_messagecommunication() ;
  const ::chat::MessageCommunication& messagecommunication() const;
  PROTOBUF_NODISCARD ::chat::MessageCommunication* release_messagecommunication();
  ::chat::MessageCommunication* mutable_messagecommunication();
  void set_allocated_messagecommunication(::chat::MessageCommunication* value);
  void unsafe_arena_set_allocated_messagecommunication(::chat::MessageCommunication* value);
  ::chat::MessageCommunication* unsafe_arena_release_messagecommunication();

  private:
  const ::chat::MessageCommunication& _internal_messagecommunication() const;
  ::chat::MessageCommunication* _internal_mutable_messagecommunication();

  public:
  // optional .chat.UserInfo userInfoResponse = 6;
  bool has_userinforesponse() const;
  void clear_userinforesponse() ;
  const ::chat::UserInfo& userinforesponse() const;
  PROTOBUF_NODISCARD ::chat::UserInfo* release_userinforesponse();
  ::chat::UserInfo* mutable_userinforesponse();
  void set_allocated_userinforesponse(::chat::UserInfo* value);
  void unsafe_arena_set_allocated_userinforesponse(::chat::UserInfo* value);
  ::chat::UserInfo* unsafe_arena_release_userinforesponse();

  private:
  const ::chat::UserInfo& _internal_userinforesponse() const;
  ::chat::UserInfo* _internal_mutable_userinforesponse();

  public:
  // optional .chat.ChangeStatus change = 7;
  bool has_change() const;
  void clear_change() ;
  const ::chat::ChangeStatus& change() const;
  PROTOBUF_NODISCARD ::chat::ChangeStatus* release_change();
  ::chat::ChangeStatus* mutable_change();
  void set_allocated_change(::chat::ChangeStatus* value);
  void unsafe_arena_set_allocated_change(::chat::ChangeStatus* value);
  ::chat::ChangeStatus* unsafe_arena_release_change();

  private:
  const ::chat::ChangeStatus& _internal_change() const;
  ::chat::ChangeStatus* _internal_mutable_change();

  public:
  // optional int32 option = 1;
  bool has_option() const;
  void clear_option() ;
  ::int32_t option() const;
  void set_option(::int32_t value);

  private:
  ::int32_t _internal_option() const;
  void _internal_set_option(::int32_t value);

  public:
  // optional int32 code = 2;
  bool has_code() const;
  void clear_code() ;
  ::int32_t code() const;
  void set_code(::int32_t value);

  private:
  ::int32_t _internal_code() const;
  void _internal_set_code(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:chat.ServerResponse)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 7, 4,
      41, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr servermessage_;
    ::chat::ConnectedUsersResponse* connectedusers_;
    ::chat::MessageCommunication* messagecommunication_;
    ::chat::UserInfo* userinforesponse_;
    ::chat::ChangeStatus* change_;
    ::int32_t option_;
    ::int32_t code_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protocol_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// UserRegistration

// optional string username = 1;
inline bool UserRegistration::has_username() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void UserRegistration::clear_username() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.username_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& UserRegistration::username() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:chat.UserRegistration.username)
  return _internal_username();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void UserRegistration::set_username(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.username_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:chat.UserRegistration.username)
}
inline std::string* UserRegistration::mutable_username() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_username();
  // @@protoc_insertion_point(field_mutable:chat.UserRegistration.username)
  return _s;
}
inline const std::string& UserRegistration::_internal_username() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.username_.Get();
}
inline void UserRegistration::_internal_set_username(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.username_.Set(value, GetArena());
}
inline std::string* UserRegistration::_internal_mutable_username() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.username_.Mutable( GetArena());
}
inline std::string* UserRegistration::release_username() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:chat.UserRegistration.username)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.username_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.username_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void UserRegistration::set_allocated_username(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.username_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.username_.IsDefault()) {
          _impl_.username_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:chat.UserRegistration.username)
}

// optional string ip = 2;
inline bool UserRegistration::has_ip() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void UserRegistration::clear_ip() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.ip_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& UserRegistration::ip() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:chat.UserRegistration.ip)
  return _internal_ip();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void UserRegistration::set_ip(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.ip_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:chat.UserRegistration.ip)
}
inline std::string* UserRegistration::mutable_ip() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_ip();
  // @@protoc_insertion_point(field_mutable:chat.UserRegistration.ip)
  return _s;
}
inline const std::string& UserRegistration::_internal_ip() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.ip_.Get();
}
inline void UserRegistration::_internal_set_ip(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.ip_.Set(value, GetArena());
}
inline std::string* UserRegistration::_internal_mutable_ip() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.ip_.Mutable( GetArena());
}
inline std::string* UserRegistration::release_ip() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:chat.UserRegistration.ip)
  if ((_impl_._has_bits_[0] & 0x00000002u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* released = _impl_.ip_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.ip_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void UserRegistration::set_allocated_ip(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.ip_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.ip_.IsDefault()) {
          _impl_.ip_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:chat.UserRegistration.ip)
}

// -------------------------------------------------------------------

// UserInfo

// optional string username = 1;
inline bool UserInfo::has_username() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void UserInfo::clear_username() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.username_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& UserInfo::username() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:chat.UserInfo.username)
  return _internal_username();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void UserInfo::set_username(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.username_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:chat.UserInfo.username)
}
inline std::string* UserInfo::mutable_username() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_username();
  // @@protoc_insertion_point(field_mutable:chat.UserInfo.username)
  return _s;
}
inline const std::string& UserInfo::_internal_username() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.username_.Get();
}
inline void UserInfo::_internal_set_username(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.username_.Set(value, GetArena());
}
inline std::string* UserInfo::_internal_mutable_username() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.username_.Mutable( GetArena());
}
inline std::string* UserInfo::release_username() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:chat.UserInfo.username)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.username_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.username_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void UserInfo::set_allocated_username(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.username_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.username_.IsDefault()) {
          _impl_.username_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:chat.UserInfo.username)
}

// optional string status = 2;
inline bool UserInfo::has_status() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void UserInfo::clear_status() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.status_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& UserInfo::status() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:chat.UserInfo.status)
  return _internal_status();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void UserInfo::set_status(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.status_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:chat.UserInfo.status)
}
inline std::string* UserInfo::mutable_status() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_status();
  // @@protoc_insertion_point(field_mutable:chat.UserInfo.status)
  return _s;
}
inline const std::string& UserInfo::_internal_status() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.status_.Get();
}
inline void UserInfo::_internal_set_status(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.status_.Set(value, GetArena());
}
inline std::string* UserInfo::_internal_mutable_status() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.status_.Mutable( GetArena());
}
inline std::string* UserInfo::release_status() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:chat.UserInfo.status)
  if ((_impl_._has_bits_[0] & 0x00000002u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* released = _impl_.status_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.status_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void UserInfo::set_allocated_status(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.status_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.status_.IsDefault()) {
          _impl_.status_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:chat.UserInfo.status)
}

// optional string ip = 3;
inline bool UserInfo::has_ip() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void UserInfo::clear_ip() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.ip_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const std::string& UserInfo::ip() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:chat.UserInfo.ip)
  return _internal_ip();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void UserInfo::set_ip(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.ip_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:chat.UserInfo.ip)
}
inline std::string* UserInfo::mutable_ip() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_ip();
  // @@protoc_insertion_point(field_mutable:chat.UserInfo.ip)
  return _s;
}
inline const std::string& UserInfo::_internal_ip() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.ip_.Get();
}
inline void UserInfo::_internal_set_ip(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.ip_.Set(value, GetArena());
}
inline std::string* UserInfo::_internal_mutable_ip() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000004u;
  return _impl_.ip_.Mutable( GetArena());
}
inline std::string* UserInfo::release_ip() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:chat.UserInfo.ip)
  if ((_impl_._has_bits_[0] & 0x00000004u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000004u;
  auto* released = _impl_.ip_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.ip_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void UserInfo::set_allocated_ip(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.ip_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.ip_.IsDefault()) {
          _impl_.ip_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:chat.UserInfo.ip)
}

// -------------------------------------------------------------------

// UserRequest

// optional string user = 1;
inline bool UserRequest::has_user() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void UserRequest::clear_user() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.user_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& UserRequest::user() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:chat.UserRequest.user)
  return _internal_user();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void UserRequest::set_user(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.user_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:chat.UserRequest.user)
}
inline std::string* UserRequest::mutable_user() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_user();
  // @@protoc_insertion_point(field_mutable:chat.UserRequest.user)
  return _s;
}
inline const std::string& UserRequest::_internal_user() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.user_.Get();
}
inline void UserRequest::_internal_set_user(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.user_.Set(value, GetArena());
}
inline std::string* UserRequest::_internal_mutable_user() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.user_.Mutable( GetArena());
}
inline std::string* UserRequest::release_user() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:chat.UserRequest.user)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.user_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.user_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void UserRequest::set_allocated_user(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.user_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.user_.IsDefault()) {
          _impl_.user_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:chat.UserRequest.user)
}

// -------------------------------------------------------------------

// ConnectedUsersResponse

// repeated .chat.UserInfo connectedUsers = 1;
inline int ConnectedUsersResponse::_internal_connectedusers_size() const {
  return _internal_connectedusers().size();
}
inline int ConnectedUsersResponse::connectedusers_size() const {
  return _internal_connectedusers_size();
}
inline void ConnectedUsersResponse::clear_connectedusers() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.connectedusers_.Clear();
}
inline ::chat::UserInfo* ConnectedUsersResponse::mutable_connectedusers(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:chat.ConnectedUsersResponse.connectedUsers)
  return _internal_mutable_connectedusers()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::chat::UserInfo>* ConnectedUsersResponse::mutable_connectedusers()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:chat.ConnectedUsersResponse.connectedUsers)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_connectedusers();
}
inline const ::chat::UserInfo& ConnectedUsersResponse::connectedusers(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:chat.ConnectedUsersResponse.connectedUsers)
  return _internal_connectedusers().Get(index);
}
inline ::chat::UserInfo* ConnectedUsersResponse::add_connectedusers() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::chat::UserInfo* _add = _internal_mutable_connectedusers()->Add();
  // @@protoc_insertion_point(field_add:chat.ConnectedUsersResponse.connectedUsers)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::chat::UserInfo>& ConnectedUsersResponse::connectedusers() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:chat.ConnectedUsersResponse.connectedUsers)
  return _internal_connectedusers();
}
inline const ::google::protobuf::RepeatedPtrField<::chat::UserInfo>&
ConnectedUsersResponse::_internal_connectedusers() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.connectedusers_;
}
inline ::google::protobuf::RepeatedPtrField<::chat::UserInfo>*
ConnectedUsersResponse::_internal_mutable_connectedusers() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.connectedusers_;
}

// -------------------------------------------------------------------

// ChangeStatus

// optional string username = 1;
inline bool ChangeStatus::has_username() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void ChangeStatus::clear_username() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.username_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ChangeStatus::username() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:chat.ChangeStatus.username)
  return _internal_username();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ChangeStatus::set_username(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.username_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:chat.ChangeStatus.username)
}
inline std::string* ChangeStatus::mutable_username() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_username();
  // @@protoc_insertion_point(field_mutable:chat.ChangeStatus.username)
  return _s;
}
inline const std::string& ChangeStatus::_internal_username() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.username_.Get();
}
inline void ChangeStatus::_internal_set_username(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.username_.Set(value, GetArena());
}
inline std::string* ChangeStatus::_internal_mutable_username() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.username_.Mutable( GetArena());
}
inline std::string* ChangeStatus::release_username() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:chat.ChangeStatus.username)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.username_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.username_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void ChangeStatus::set_allocated_username(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.username_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.username_.IsDefault()) {
          _impl_.username_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:chat.ChangeStatus.username)
}

// optional string status = 2;
inline bool ChangeStatus::has_status() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void ChangeStatus::clear_status() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.status_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& ChangeStatus::status() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:chat.ChangeStatus.status)
  return _internal_status();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ChangeStatus::set_status(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.status_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:chat.ChangeStatus.status)
}
inline std::string* ChangeStatus::mutable_status() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_status();
  // @@protoc_insertion_point(field_mutable:chat.ChangeStatus.status)
  return _s;
}
inline const std::string& ChangeStatus::_internal_status() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.status_.Get();
}
inline void ChangeStatus::_internal_set_status(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.status_.Set(value, GetArena());
}
inline std::string* ChangeStatus::_internal_mutable_status() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.status_.Mutable( GetArena());
}
inline std::string* ChangeStatus::release_status() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:chat.ChangeStatus.status)
  if ((_impl_._has_bits_[0] & 0x00000002u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* released = _impl_.status_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.status_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void ChangeStatus::set_allocated_status(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.status_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.status_.IsDefault()) {
          _impl_.status_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:chat.ChangeStatus.status)
}

// -------------------------------------------------------------------

// MessageCommunication

// optional string message = 1;
inline bool MessageCommunication::has_message() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void MessageCommunication::clear_message() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.message_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& MessageCommunication::message() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:chat.MessageCommunication.message)
  return _internal_message();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void MessageCommunication::set_message(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.message_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:chat.MessageCommunication.message)
}
inline std::string* MessageCommunication::mutable_message() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:chat.MessageCommunication.message)
  return _s;
}
inline const std::string& MessageCommunication::_internal_message() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.message_.Get();
}
inline void MessageCommunication::_internal_set_message(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.message_.Set(value, GetArena());
}
inline std::string* MessageCommunication::_internal_mutable_message() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.message_.Mutable( GetArena());
}
inline std::string* MessageCommunication::release_message() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:chat.MessageCommunication.message)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.message_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.message_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void MessageCommunication::set_allocated_message(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.message_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.message_.IsDefault()) {
          _impl_.message_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:chat.MessageCommunication.message)
}

// optional string recipient = 2;
inline bool MessageCommunication::has_recipient() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void MessageCommunication::clear_recipient() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.recipient_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& MessageCommunication::recipient() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:chat.MessageCommunication.recipient)
  return _internal_recipient();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void MessageCommunication::set_recipient(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.recipient_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:chat.MessageCommunication.recipient)
}
inline std::string* MessageCommunication::mutable_recipient() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_recipient();
  // @@protoc_insertion_point(field_mutable:chat.MessageCommunication.recipient)
  return _s;
}
inline const std::string& MessageCommunication::_internal_recipient() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.recipient_.Get();
}
inline void MessageCommunication::_internal_set_recipient(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.recipient_.Set(value, GetArena());
}
inline std::string* MessageCommunication::_internal_mutable_recipient() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.recipient_.Mutable( GetArena());
}
inline std::string* MessageCommunication::release_recipient() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:chat.MessageCommunication.recipient)
  if ((_impl_._has_bits_[0] & 0x00000002u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* released = _impl_.recipient_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.recipient_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void MessageCommunication::set_allocated_recipient(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.recipient_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.recipient_.IsDefault()) {
          _impl_.recipient_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:chat.MessageCommunication.recipient)
}

// optional string sender = 3;
inline bool MessageCommunication::has_sender() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void MessageCommunication::clear_sender() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.sender_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const std::string& MessageCommunication::sender() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:chat.MessageCommunication.sender)
  return _internal_sender();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void MessageCommunication::set_sender(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.sender_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:chat.MessageCommunication.sender)
}
inline std::string* MessageCommunication::mutable_sender() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_sender();
  // @@protoc_insertion_point(field_mutable:chat.MessageCommunication.sender)
  return _s;
}
inline const std::string& MessageCommunication::_internal_sender() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.sender_.Get();
}
inline void MessageCommunication::_internal_set_sender(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.sender_.Set(value, GetArena());
}
inline std::string* MessageCommunication::_internal_mutable_sender() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000004u;
  return _impl_.sender_.Mutable( GetArena());
}
inline std::string* MessageCommunication::release_sender() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:chat.MessageCommunication.sender)
  if ((_impl_._has_bits_[0] & 0x00000004u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000004u;
  auto* released = _impl_.sender_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.sender_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void MessageCommunication::set_allocated_sender(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.sender_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.sender_.IsDefault()) {
          _impl_.sender_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:chat.MessageCommunication.sender)
}

// -------------------------------------------------------------------

// ClientPetition

// optional int32 option = 1;
inline bool ClientPetition::has_option() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline void ClientPetition::clear_option() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.option_ = 0;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline ::int32_t ClientPetition::option() const {
  // @@protoc_insertion_point(field_get:chat.ClientPetition.option)
  return _internal_option();
}
inline void ClientPetition::set_option(::int32_t value) {
  _internal_set_option(value);
  _impl_._has_bits_[0] |= 0x00000010u;
  // @@protoc_insertion_point(field_set:chat.ClientPetition.option)
}
inline ::int32_t ClientPetition::_internal_option() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.option_;
}
inline void ClientPetition::_internal_set_option(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.option_ = value;
}

// optional .chat.UserRegistration registration = 2;
inline bool ClientPetition::has_registration() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.registration_ != nullptr);
  return value;
}
inline void ClientPetition::clear_registration() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.registration_ != nullptr) _impl_.registration_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::chat::UserRegistration& ClientPetition::_internal_registration() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::chat::UserRegistration* p = _impl_.registration_;
  return p != nullptr ? *p : reinterpret_cast<const ::chat::UserRegistration&>(::chat::_UserRegistration_default_instance_);
}
inline const ::chat::UserRegistration& ClientPetition::registration() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:chat.ClientPetition.registration)
  return _internal_registration();
}
inline void ClientPetition::unsafe_arena_set_allocated_registration(::chat::UserRegistration* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.registration_);
  }
  _impl_.registration_ = reinterpret_cast<::chat::UserRegistration*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:chat.ClientPetition.registration)
}
inline ::chat::UserRegistration* ClientPetition::release_registration() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::chat::UserRegistration* released = _impl_.registration_;
  _impl_.registration_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::chat::UserRegistration* ClientPetition::unsafe_arena_release_registration() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:chat.ClientPetition.registration)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::chat::UserRegistration* temp = _impl_.registration_;
  _impl_.registration_ = nullptr;
  return temp;
}
inline ::chat::UserRegistration* ClientPetition::_internal_mutable_registration() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.registration_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::chat::UserRegistration>(GetArena());
    _impl_.registration_ = reinterpret_cast<::chat::UserRegistration*>(p);
  }
  return _impl_.registration_;
}
inline ::chat::UserRegistration* ClientPetition::mutable_registration() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::chat::UserRegistration* _msg = _internal_mutable_registration();
  // @@protoc_insertion_point(field_mutable:chat.ClientPetition.registration)
  return _msg;
}
inline void ClientPetition::set_allocated_registration(::chat::UserRegistration* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete (_impl_.registration_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.registration_ = reinterpret_cast<::chat::UserRegistration*>(value);
  // @@protoc_insertion_point(field_set_allocated:chat.ClientPetition.registration)
}

// optional .chat.UserRequest users = 3;
inline bool ClientPetition::has_users() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.users_ != nullptr);
  return value;
}
inline void ClientPetition::clear_users() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.users_ != nullptr) _impl_.users_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::chat::UserRequest& ClientPetition::_internal_users() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::chat::UserRequest* p = _impl_.users_;
  return p != nullptr ? *p : reinterpret_cast<const ::chat::UserRequest&>(::chat::_UserRequest_default_instance_);
}
inline const ::chat::UserRequest& ClientPetition::users() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:chat.ClientPetition.users)
  return _internal_users();
}
inline void ClientPetition::unsafe_arena_set_allocated_users(::chat::UserRequest* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.users_);
  }
  _impl_.users_ = reinterpret_cast<::chat::UserRequest*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:chat.ClientPetition.users)
}
inline ::chat::UserRequest* ClientPetition::release_users() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::chat::UserRequest* released = _impl_.users_;
  _impl_.users_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::chat::UserRequest* ClientPetition::unsafe_arena_release_users() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:chat.ClientPetition.users)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::chat::UserRequest* temp = _impl_.users_;
  _impl_.users_ = nullptr;
  return temp;
}
inline ::chat::UserRequest* ClientPetition::_internal_mutable_users() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.users_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::chat::UserRequest>(GetArena());
    _impl_.users_ = reinterpret_cast<::chat::UserRequest*>(p);
  }
  return _impl_.users_;
}
inline ::chat::UserRequest* ClientPetition::mutable_users() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000002u;
  ::chat::UserRequest* _msg = _internal_mutable_users();
  // @@protoc_insertion_point(field_mutable:chat.ClientPetition.users)
  return _msg;
}
inline void ClientPetition::set_allocated_users(::chat::UserRequest* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete (_impl_.users_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.users_ = reinterpret_cast<::chat::UserRequest*>(value);
  // @@protoc_insertion_point(field_set_allocated:chat.ClientPetition.users)
}

// optional .chat.ChangeStatus change = 4;
inline bool ClientPetition::has_change() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.change_ != nullptr);
  return value;
}
inline void ClientPetition::clear_change() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.change_ != nullptr) _impl_.change_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const ::chat::ChangeStatus& ClientPetition::_internal_change() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::chat::ChangeStatus* p = _impl_.change_;
  return p != nullptr ? *p : reinterpret_cast<const ::chat::ChangeStatus&>(::chat::_ChangeStatus_default_instance_);
}
inline const ::chat::ChangeStatus& ClientPetition::change() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:chat.ClientPetition.change)
  return _internal_change();
}
inline void ClientPetition::unsafe_arena_set_allocated_change(::chat::ChangeStatus* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.change_);
  }
  _impl_.change_ = reinterpret_cast<::chat::ChangeStatus*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:chat.ClientPetition.change)
}
inline ::chat::ChangeStatus* ClientPetition::release_change() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::chat::ChangeStatus* released = _impl_.change_;
  _impl_.change_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::chat::ChangeStatus* ClientPetition::unsafe_arena_release_change() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:chat.ClientPetition.change)

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::chat::ChangeStatus* temp = _impl_.change_;
  _impl_.change_ = nullptr;
  return temp;
}
inline ::chat::ChangeStatus* ClientPetition::_internal_mutable_change() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.change_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::chat::ChangeStatus>(GetArena());
    _impl_.change_ = reinterpret_cast<::chat::ChangeStatus*>(p);
  }
  return _impl_.change_;
}
inline ::chat::ChangeStatus* ClientPetition::mutable_change() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000004u;
  ::chat::ChangeStatus* _msg = _internal_mutable_change();
  // @@protoc_insertion_point(field_mutable:chat.ClientPetition.change)
  return _msg;
}
inline void ClientPetition::set_allocated_change(::chat::ChangeStatus* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete (_impl_.change_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }

  _impl_.change_ = reinterpret_cast<::chat::ChangeStatus*>(value);
  // @@protoc_insertion_point(field_set_allocated:chat.ClientPetition.change)
}

// optional .chat.MessageCommunication messageCommunication = 5;
inline bool ClientPetition::has_messagecommunication() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.messagecommunication_ != nullptr);
  return value;
}
inline void ClientPetition::clear_messagecommunication() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.messagecommunication_ != nullptr) _impl_.messagecommunication_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline const ::chat::MessageCommunication& ClientPetition::_internal_messagecommunication() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::chat::MessageCommunication* p = _impl_.messagecommunication_;
  return p != nullptr ? *p : reinterpret_cast<const ::chat::MessageCommunication&>(::chat::_MessageCommunication_default_instance_);
}
inline const ::chat::MessageCommunication& ClientPetition::messagecommunication() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:chat.ClientPetition.messageCommunication)
  return _internal_messagecommunication();
}
inline void ClientPetition::unsafe_arena_set_allocated_messagecommunication(::chat::MessageCommunication* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.messagecommunication_);
  }
  _impl_.messagecommunication_ = reinterpret_cast<::chat::MessageCommunication*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:chat.ClientPetition.messageCommunication)
}
inline ::chat::MessageCommunication* ClientPetition::release_messagecommunication() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000008u;
  ::chat::MessageCommunication* released = _impl_.messagecommunication_;
  _impl_.messagecommunication_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::chat::MessageCommunication* ClientPetition::unsafe_arena_release_messagecommunication() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:chat.ClientPetition.messageCommunication)

  _impl_._has_bits_[0] &= ~0x00000008u;
  ::chat::MessageCommunication* temp = _impl_.messagecommunication_;
  _impl_.messagecommunication_ = nullptr;
  return temp;
}
inline ::chat::MessageCommunication* ClientPetition::_internal_mutable_messagecommunication() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.messagecommunication_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::chat::MessageCommunication>(GetArena());
    _impl_.messagecommunication_ = reinterpret_cast<::chat::MessageCommunication*>(p);
  }
  return _impl_.messagecommunication_;
}
inline ::chat::MessageCommunication* ClientPetition::mutable_messagecommunication() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000008u;
  ::chat::MessageCommunication* _msg = _internal_mutable_messagecommunication();
  // @@protoc_insertion_point(field_mutable:chat.ClientPetition.messageCommunication)
  return _msg;
}
inline void ClientPetition::set_allocated_messagecommunication(::chat::MessageCommunication* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete (_impl_.messagecommunication_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }

  _impl_.messagecommunication_ = reinterpret_cast<::chat::MessageCommunication*>(value);
  // @@protoc_insertion_point(field_set_allocated:chat.ClientPetition.messageCommunication)
}

// -------------------------------------------------------------------

// ServerResponse

// optional int32 option = 1;
inline bool ServerResponse::has_option() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline void ServerResponse::clear_option() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.option_ = 0;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline ::int32_t ServerResponse::option() const {
  // @@protoc_insertion_point(field_get:chat.ServerResponse.option)
  return _internal_option();
}
inline void ServerResponse::set_option(::int32_t value) {
  _internal_set_option(value);
  _impl_._has_bits_[0] |= 0x00000020u;
  // @@protoc_insertion_point(field_set:chat.ServerResponse.option)
}
inline ::int32_t ServerResponse::_internal_option() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.option_;
}
inline void ServerResponse::_internal_set_option(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.option_ = value;
}

// optional int32 code = 2;
inline bool ServerResponse::has_code() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline void ServerResponse::clear_code() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.code_ = 0;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline ::int32_t ServerResponse::code() const {
  // @@protoc_insertion_point(field_get:chat.ServerResponse.code)
  return _internal_code();
}
inline void ServerResponse::set_code(::int32_t value) {
  _internal_set_code(value);
  _impl_._has_bits_[0] |= 0x00000040u;
  // @@protoc_insertion_point(field_set:chat.ServerResponse.code)
}
inline ::int32_t ServerResponse::_internal_code() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.code_;
}
inline void ServerResponse::_internal_set_code(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.code_ = value;
}

// optional string serverMessage = 3;
inline bool ServerResponse::has_servermessage() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void ServerResponse::clear_servermessage() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.servermessage_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ServerResponse::servermessage() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:chat.ServerResponse.serverMessage)
  return _internal_servermessage();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ServerResponse::set_servermessage(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.servermessage_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:chat.ServerResponse.serverMessage)
}
inline std::string* ServerResponse::mutable_servermessage() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_servermessage();
  // @@protoc_insertion_point(field_mutable:chat.ServerResponse.serverMessage)
  return _s;
}
inline const std::string& ServerResponse::_internal_servermessage() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.servermessage_.Get();
}
inline void ServerResponse::_internal_set_servermessage(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.servermessage_.Set(value, GetArena());
}
inline std::string* ServerResponse::_internal_mutable_servermessage() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.servermessage_.Mutable( GetArena());
}
inline std::string* ServerResponse::release_servermessage() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:chat.ServerResponse.serverMessage)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.servermessage_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.servermessage_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void ServerResponse::set_allocated_servermessage(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.servermessage_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.servermessage_.IsDefault()) {
          _impl_.servermessage_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:chat.ServerResponse.serverMessage)
}

// optional .chat.ConnectedUsersResponse connectedUsers = 4;
inline bool ServerResponse::has_connectedusers() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.connectedusers_ != nullptr);
  return value;
}
inline void ServerResponse::clear_connectedusers() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.connectedusers_ != nullptr) _impl_.connectedusers_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::chat::ConnectedUsersResponse& ServerResponse::_internal_connectedusers() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::chat::ConnectedUsersResponse* p = _impl_.connectedusers_;
  return p != nullptr ? *p : reinterpret_cast<const ::chat::ConnectedUsersResponse&>(::chat::_ConnectedUsersResponse_default_instance_);
}
inline const ::chat::ConnectedUsersResponse& ServerResponse::connectedusers() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:chat.ServerResponse.connectedUsers)
  return _internal_connectedusers();
}
inline void ServerResponse::unsafe_arena_set_allocated_connectedusers(::chat::ConnectedUsersResponse* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.connectedusers_);
  }
  _impl_.connectedusers_ = reinterpret_cast<::chat::ConnectedUsersResponse*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:chat.ServerResponse.connectedUsers)
}
inline ::chat::ConnectedUsersResponse* ServerResponse::release_connectedusers() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::chat::ConnectedUsersResponse* released = _impl_.connectedusers_;
  _impl_.connectedusers_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::chat::ConnectedUsersResponse* ServerResponse::unsafe_arena_release_connectedusers() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:chat.ServerResponse.connectedUsers)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::chat::ConnectedUsersResponse* temp = _impl_.connectedusers_;
  _impl_.connectedusers_ = nullptr;
  return temp;
}
inline ::chat::ConnectedUsersResponse* ServerResponse::_internal_mutable_connectedusers() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.connectedusers_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::chat::ConnectedUsersResponse>(GetArena());
    _impl_.connectedusers_ = reinterpret_cast<::chat::ConnectedUsersResponse*>(p);
  }
  return _impl_.connectedusers_;
}
inline ::chat::ConnectedUsersResponse* ServerResponse::mutable_connectedusers() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000002u;
  ::chat::ConnectedUsersResponse* _msg = _internal_mutable_connectedusers();
  // @@protoc_insertion_point(field_mutable:chat.ServerResponse.connectedUsers)
  return _msg;
}
inline void ServerResponse::set_allocated_connectedusers(::chat::ConnectedUsersResponse* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete (_impl_.connectedusers_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.connectedusers_ = reinterpret_cast<::chat::ConnectedUsersResponse*>(value);
  // @@protoc_insertion_point(field_set_allocated:chat.ServerResponse.connectedUsers)
}

// optional .chat.MessageCommunication messageCommunication = 5;
inline bool ServerResponse::has_messagecommunication() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.messagecommunication_ != nullptr);
  return value;
}
inline void ServerResponse::clear_messagecommunication() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.messagecommunication_ != nullptr) _impl_.messagecommunication_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const ::chat::MessageCommunication& ServerResponse::_internal_messagecommunication() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::chat::MessageCommunication* p = _impl_.messagecommunication_;
  return p != nullptr ? *p : reinterpret_cast<const ::chat::MessageCommunication&>(::chat::_MessageCommunication_default_instance_);
}
inline const ::chat::MessageCommunication& ServerResponse::messagecommunication() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:chat.ServerResponse.messageCommunication)
  return _internal_messagecommunication();
}
inline void ServerResponse::unsafe_arena_set_allocated_messagecommunication(::chat::MessageCommunication* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.messagecommunication_);
  }
  _impl_.messagecommunication_ = reinterpret_cast<::chat::MessageCommunication*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:chat.ServerResponse.messageCommunication)
}
inline ::chat::MessageCommunication* ServerResponse::release_messagecommunication() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::chat::MessageCommunication* released = _impl_.messagecommunication_;
  _impl_.messagecommunication_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::chat::MessageCommunication* ServerResponse::unsafe_arena_release_messagecommunication() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:chat.ServerResponse.messageCommunication)

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::chat::MessageCommunication* temp = _impl_.messagecommunication_;
  _impl_.messagecommunication_ = nullptr;
  return temp;
}
inline ::chat::MessageCommunication* ServerResponse::_internal_mutable_messagecommunication() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.messagecommunication_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::chat::MessageCommunication>(GetArena());
    _impl_.messagecommunication_ = reinterpret_cast<::chat::MessageCommunication*>(p);
  }
  return _impl_.messagecommunication_;
}
inline ::chat::MessageCommunication* ServerResponse::mutable_messagecommunication() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000004u;
  ::chat::MessageCommunication* _msg = _internal_mutable_messagecommunication();
  // @@protoc_insertion_point(field_mutable:chat.ServerResponse.messageCommunication)
  return _msg;
}
inline void ServerResponse::set_allocated_messagecommunication(::chat::MessageCommunication* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete (_impl_.messagecommunication_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }

  _impl_.messagecommunication_ = reinterpret_cast<::chat::MessageCommunication*>(value);
  // @@protoc_insertion_point(field_set_allocated:chat.ServerResponse.messageCommunication)
}

// optional .chat.UserInfo userInfoResponse = 6;
inline bool ServerResponse::has_userinforesponse() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.userinforesponse_ != nullptr);
  return value;
}
inline void ServerResponse::clear_userinforesponse() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.userinforesponse_ != nullptr) _impl_.userinforesponse_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline const ::chat::UserInfo& ServerResponse::_internal_userinforesponse() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::chat::UserInfo* p = _impl_.userinforesponse_;
  return p != nullptr ? *p : reinterpret_cast<const ::chat::UserInfo&>(::chat::_UserInfo_default_instance_);
}
inline const ::chat::UserInfo& ServerResponse::userinforesponse() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:chat.ServerResponse.userInfoResponse)
  return _internal_userinforesponse();
}
inline void ServerResponse::unsafe_arena_set_allocated_userinforesponse(::chat::UserInfo* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.userinforesponse_);
  }
  _impl_.userinforesponse_ = reinterpret_cast<::chat::UserInfo*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:chat.ServerResponse.userInfoResponse)
}
inline ::chat::UserInfo* ServerResponse::release_userinforesponse() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000008u;
  ::chat::UserInfo* released = _impl_.userinforesponse_;
  _impl_.userinforesponse_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::chat::UserInfo* ServerResponse::unsafe_arena_release_userinforesponse() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:chat.ServerResponse.userInfoResponse)

  _impl_._has_bits_[0] &= ~0x00000008u;
  ::chat::UserInfo* temp = _impl_.userinforesponse_;
  _impl_.userinforesponse_ = nullptr;
  return temp;
}
inline ::chat::UserInfo* ServerResponse::_internal_mutable_userinforesponse() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.userinforesponse_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::chat::UserInfo>(GetArena());
    _impl_.userinforesponse_ = reinterpret_cast<::chat::UserInfo*>(p);
  }
  return _impl_.userinforesponse_;
}
inline ::chat::UserInfo* ServerResponse::mutable_userinforesponse() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000008u;
  ::chat::UserInfo* _msg = _internal_mutable_userinforesponse();
  // @@protoc_insertion_point(field_mutable:chat.ServerResponse.userInfoResponse)
  return _msg;
}
inline void ServerResponse::set_allocated_userinforesponse(::chat::UserInfo* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete (_impl_.userinforesponse_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }

  _impl_.userinforesponse_ = reinterpret_cast<::chat::UserInfo*>(value);
  // @@protoc_insertion_point(field_set_allocated:chat.ServerResponse.userInfoResponse)
}

// optional .chat.ChangeStatus change = 7;
inline bool ServerResponse::has_change() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.change_ != nullptr);
  return value;
}
inline void ServerResponse::clear_change() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.change_ != nullptr) _impl_.change_->Clear();
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline const ::chat::ChangeStatus& ServerResponse::_internal_change() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::chat::ChangeStatus* p = _impl_.change_;
  return p != nullptr ? *p : reinterpret_cast<const ::chat::ChangeStatus&>(::chat::_ChangeStatus_default_instance_);
}
inline const ::chat::ChangeStatus& ServerResponse::change() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:chat.ServerResponse.change)
  return _internal_change();
}
inline void ServerResponse::unsafe_arena_set_allocated_change(::chat::ChangeStatus* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.change_);
  }
  _impl_.change_ = reinterpret_cast<::chat::ChangeStatus*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:chat.ServerResponse.change)
}
inline ::chat::ChangeStatus* ServerResponse::release_change() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000010u;
  ::chat::ChangeStatus* released = _impl_.change_;
  _impl_.change_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::chat::ChangeStatus* ServerResponse::unsafe_arena_release_change() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:chat.ServerResponse.change)

  _impl_._has_bits_[0] &= ~0x00000010u;
  ::chat::ChangeStatus* temp = _impl_.change_;
  _impl_.change_ = nullptr;
  return temp;
}
inline ::chat::ChangeStatus* ServerResponse::_internal_mutable_change() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.change_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::chat::ChangeStatus>(GetArena());
    _impl_.change_ = reinterpret_cast<::chat::ChangeStatus*>(p);
  }
  return _impl_.change_;
}
inline ::chat::ChangeStatus* ServerResponse::mutable_change() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000010u;
  ::chat::ChangeStatus* _msg = _internal_mutable_change();
  // @@protoc_insertion_point(field_mutable:chat.ServerResponse.change)
  return _msg;
}
inline void ServerResponse::set_allocated_change(::chat::ChangeStatus* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete (_impl_.change_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }

  _impl_.change_ = reinterpret_cast<::chat::ChangeStatus*>(value);
  // @@protoc_insertion_point(field_set_allocated:chat.ServerResponse.change)
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace chat


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_protocol_2eproto_2epb_2eh
